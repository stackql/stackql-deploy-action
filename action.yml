name: 'stackql-deploy'
description: 'Deploy and test stacks using stackql-deploy'
inputs:
  command:
    description: 'stackql-deploy command to run (`build` or `test`)'
    required: true
  stack_dir:
    description: 'repo directory containing `stackql_manifest.yml` and `resources` dir'
    required: true
  stack_env:
    description: 'environment to deploy or test (e.g., `dev`, `prod`)'
    required: true
  env_vars:
    description: 'environment variables or secrets imported into a stack (format: `KEY=value,KEY2=value2`)'
    required: false
  env_file:
    description: 'environment variables sourced from a file'
    required: false
  show_queries:
    description: 'show queries run in the output logs'
    required: false
  log_level:
    description: 'set the logging level (`INFO` or `DEBUG`, defaults to `INFO`)'
    required: false    
  dry_run:
    description: 'perform a dry run of the operation'
    required: false
  custom_registry:
    description: 'custom registry URL to be used for stackql'
    required: false
  on_failure:
    description: 'action on failure'
    required: false
  show_info:
    description: 'show stackql-deploy info output'
    required: false
  output_file:
    description: 'output file to capture deployment outputs (JSON format)'
    required: false

outputs:
  deployment_outputs:
    description: 'JSON string containing all deployment outputs from stackql-deploy'
    value: ${{ steps.stackql-deploy.outputs.deployment_outputs }}

runs:
  using: 'composite'
  steps:
    - name: Install Python
      uses: actions/setup-python@v6.0.0
      with:
        python-version: '3.13'  

    - name: Install stackql-deploy
      shell: bash
      run: pip install -q stackql-deploy pyyaml || { echo "pip install failed"; exit 1; }

    - name: Run stackql-deploy
      id: stackql-deploy
      shell: bash
      run: |
        # Show stackql-deploy info if requested
        if [ "${{ inputs.show_info }}" == "true" ]; then
          echo "Running stackql-deploy info..."
          stackql-deploy info
          echo ""
        fi

        ENV_OPTS=""
        if [ -n "${{ inputs.env_vars }}" ]; then
          IFS=',' read -r -a env_array <<< "${{ inputs.env_vars }}"
          for env_var in "${env_array[@]}"; do
            ENV_OPTS+=" -e $env_var"
          done
        fi

        STACKQL_DEPLOY_CMD="stackql-deploy ${{ inputs.command }} ${{ inputs.stack_dir }} ${{ inputs.stack_env }}"

        if [ -n "${{ inputs.env_file }}" ]; then
          STACKQL_DEPLOY_CMD+=" --env-file ${{ inputs.env_file }}"
        fi
        if [ "${{ inputs.show_queries }}" == "true" ]; then
          STACKQL_DEPLOY_CMD+=" --show-queries"
        fi
        if [ -n "${{ inputs.log_level }}" ]; then
          STACKQL_DEPLOY_CMD+=" --log-level ${{ inputs.log_level }}"
        fi
        if [ "${{ inputs.dry_run }}" == "true" ]; then
          STACKQL_DEPLOY_CMD+=" --dry-run"
        fi
        if [ -n "${{ inputs.custom_registry }}" ]; then
          STACKQL_DEPLOY_CMD+=" --custom-registry ${{ inputs.custom_registry }}"
        fi
        if [ -n "${{ inputs.on_failure }}" ]; then
          STACKQL_DEPLOY_CMD+=" --on-failure ${{ inputs.on_failure }}"
        fi
        
        # Handle output file
        OUTPUT_FILE=""
        if [ -n "${{ inputs.output_file }}" ]; then
          OUTPUT_FILE="${{ inputs.output_file }}"
          STACKQL_DEPLOY_CMD+=" --output-file $OUTPUT_FILE"
        fi

        echo "executing: $STACKQL_DEPLOY_CMD $ENV_OPTS"
        
        # Run command and capture exit code
        set +e
        $STACKQL_DEPLOY_CMD $ENV_OPTS
        EXIT_CODE=$?
        set -e
        
        # Handle failure
        if [ $EXIT_CODE -ne 0 ]; then
          echo "## ❌ StackQL Deploy ${{ inputs.command }} Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.stack_env }}" >> $GITHUB_STEP_SUMMARY
          echo "**Stack Directory:** ${{ inputs.stack_dir }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Failed at $(date -u +'%Y-%m-%d %H:%M:%S UTC')_" >> $GITHUB_STEP_SUMMARY
          exit $EXIT_CODE
        fi

        # Capture outputs if output file was specified (success path)
        if [ -n "$OUTPUT_FILE" ] && [ -f "$OUTPUT_FILE" ]; then
          # Read the JSON content
          DEPLOYMENT_OUTPUTS=$(cat "$OUTPUT_FILE")
          
          # Set the outputs for the action
          echo "deployment_outputs<<EOF" >> $GITHUB_OUTPUT
          echo "$DEPLOYMENT_OUTPUTS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        
          # Add to job summary with formatted output
          echo "## 📦 StackQL Deploy ${{ inputs.command }}:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Parse and display each key-value pair
          echo "$DEPLOYMENT_OUTPUTS" | jq -r 'to_entries[] | "**\(.key):** \(.value)"' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "_Completed at $(date -u +'%Y-%m-%d %H:%M:%S UTC')_" >> $GITHUB_STEP_SUMMARY

          echo "Deployment outputs captured successfully"
        fi

branding:
  icon: 'server'
  color: 'blue'
